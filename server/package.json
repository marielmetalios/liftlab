{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "build": "npx tsc",
    "start": "npm run build && node dist/server.js --ignore client",
    "dev": "npx nodemon",
    "test": "echo \"Error: no test specified\" && exit 1",
    "seed": "node dist/seeds/index.js",
    "postdeploy":"node -e \"require('dotenv').config(); const { Sequelize } = require('sequelize'); const sequelize = new Sequelize(process.env.DB_URL ? process.env.DB_URL : process.env.DB_NAME, process.env.DB_URL ? undefined : process.env.DB_USER, process.env.DB_URL ? undefined : process.env.DB_PASSWORD, { host: process.env.DB_URL ? undefined : process.env.DB_HOST, dialect: 'postgres' }); Promise.all([sequelize.query('SELECT setval((SELECT pg_get_serial_sequence(\\'exercises\\', \\'id\\')), (SELECT COALESCE(MAX(id), 1) FROM exercises), true);'), sequelize.query('SELECT setval((SELECT pg_get_serial_sequence(\\'equipment\\', \\'id\\')), (SELECT COALESCE(MAX(id), 1) FROM equipment), true);')]).then(() => { console.log('Sequences reset!'); sequelize.close(); }).catch(err => { console.error('Error resetting sequences:', err); sequelize.close(); });\""
  },
  "nodemonConfig": {
    "watch": [
      "src"
    ],
    "ext": "ts,json,js",
    "exec": "npx tsc && node dist/server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "pg": "^8.11.5",
    "sequelize": "^6.37.3",
    "success-motivational-quotes": "^1.0.8"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.2",
    "@types/express": "^4.17.21",
    "@types/jsonwebtoken": "^9.0.6",
    "typescript": "^5.4.5"
  }
}
